# yamllint disable
name: CI/CD Pipeline

# Required GitHub Secrets (optional - workflow will skip steps if not configured):
# - SNYK_TOKEN: Snyk API token for security scanning
# - SLACK_WEBHOOK: Slack webhook URL for deployment notifications
# - STAGING_URL: Staging environment URL for performance testing
# - WEBPAGETEST_API_KEY: WebPageTest API key for performance testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run unit tests
      run: npm run test:unit
    
    - name: Run integration tests
      run: npm run test:integration
    
    - name: Run E2E tests
      run: npm run test:e2e
    
    - name: Generate test coverage
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    env:
      # yamllint disable-line rule:truthy
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level moderate
    
    - name: Run Snyk security scan
      if: env.SNYK_TOKEN != ''
      uses: snyk/actions/node@master
      env:
        # yamllint disable-line rule:truthy
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
    
    - name: Skip Snyk scan (no token)
      if: env.SNYK_TOKEN == ''
      run: echo "Skipping Snyk security scan - SNYK_TOKEN not configured"
    
    - name: Run OWASP dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'iSpaan'
        path: '.'
        format: 'JSON'
        out: './reports'

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: |
          .next/
          public/
          package.json
          package-lock.json

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: ./
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment commands here
    
    - name: Run smoke tests
      run: npm run test:smoke

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    env:
      # yamllint disable-line rule:truthy
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: ./
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your production deployment commands here
    
    - name: Run production smoke tests
      run: npm run test:smoke:production
    
    - name: Notify deployment
      if: env.SLACK_WEBHOOK != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        # yamllint disable-line rule:truthy
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
    
    - name: Skip Slack notification (no webhook)
      if: env.SLACK_WEBHOOK == ''
      run: echo "Skipping Slack notification - SLACK_WEBHOOK not configured"

  performance:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    env:
      # yamllint disable-line rule:truthy
      STAGING_URL: ${{ secrets.STAGING_URL }}
      # yamllint disable-line rule:truthy
      WEBPAGETEST_API_KEY: ${{ secrets.WEBPAGETEST_API_KEY }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
    
    - name: Run WebPageTest
      if: env.STAGING_URL != '' && env.WEBPAGETEST_API_KEY != ''
      uses: actions/webpagetest-action@v1
      with:
        # yamllint disable-line rule:truthy
        url: ${{ secrets.STAGING_URL }}
        # yamllint disable-line rule:truthy
        api_key: ${{ secrets.WEBPAGETEST_API_KEY }}
        location: 'Dulles:Chrome'
        runs: 3
        video: 1
        private: 1
    
    - name: Skip WebPageTest (missing secrets)
      if: env.STAGING_URL == '' || env.WEBPAGETEST_API_KEY == ''
      run: echo "Skipping WebPageTest - STAGING_URL or WEBPAGETEST_API_KEY not configured"
