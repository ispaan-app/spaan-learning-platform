rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && (
        request.auth.token.role in ['admin', 'super-admin'] ||
        request.auth.token.email == 'developer@ispaan.com' ||
        request.auth.token.email == 'sifiso@thegaselagroup.co.za' ||
        request.auth.token.email == 'skitzoc9@gmail.com'
      );
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && (
        request.auth.token.role == 'super-admin' ||
        request.auth.token.email == 'developer@ispaan.com' ||
        request.auth.token.email == 'sifiso@thegaselagroup.co.za' ||
        request.auth.token.email == 'skitzoc9@gmail.com'
      );
    }
    
    function isLearner() {
      return isAuthenticated() && (
        request.auth.token.role in ['learner', 'applicant'] ||
        // Allow authenticated users who aren't admins to be treated as learners
        (request.auth.token.role == null && !isAdmin())
      );
    }
    
    // Users collection - comprehensive access for dashboard queries
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow read, write: if isAdmin();
      allow read: if isAuthenticated(); // Allow all authenticated users to read for dashboard stats
      allow create: if isAuthenticated(); // Allow user creation
    }
    
    // Applications collection
    match /applications/{applicationId} {
      allow create: if isLearner();
      allow read, write: if isAdmin();
      allow read: if isOwner(resource.data.userId);
      allow read: if isAuthenticated(); // Allow reading for dashboard stats
    }
    
    // Programs collection - public read for application forms
    match /programs/{programId} {
      allow read: if true; // Public programs for application
      allow write: if isAdmin();
    }
    
    // Placements collection - comprehensive access for dashboard queries
    match /placements/{placementId} {
      allow read, write: if isAdmin();
      allow read: if isAuthenticated(); // Allow all authenticated users to read for dashboard stats
    }
    
    // Attendance collection
    match /attendance/{attendanceId} {
      allow read: if isOwner(resource.data.userId);
      allow read, write: if isAdmin();
      allow create: if isLearner();
    }
    
    // Leave requests collection
    match /leaveRequests/{leaveId} {
      allow read, create: if isOwner(resource.data.userId);
      allow read, write: if isAdmin();
    }
    
    // Stipend reports collection
    match /stipendReports/{reportId} {
      allow read, create: if isOwner(resource.data.userId);
      allow read, write: if isAdmin();
      allow read, write: if isSuperAdmin();
      allow read: if isAuthenticated(); // Allow reading for dashboard stats
      allow create: if isAuthenticated(); // Allow creating for development
    }
    
    // Issue reports collection
    match /issueReports/{issueId} {
      allow read, create: if isOwner(resource.data.userId);
      allow read, write: if isAdmin();
      allow read: if isAuthenticated(); // Allow reading for dashboard stats
    }
    
    // Learner profiles collection
    match /learnerProfiles/{profileId} {
      allow read, write: if isOwner(resource.data.userId);
      allow read, write: if isAdmin();
      allow create: if isLearner();
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read, write: if isOwner(resource.data.userId);
      allow read, write: if isAdmin();
      allow read: if isAuthenticated(); // Allow reading for dashboard stats
    }
    
    // Audit logs collection - super admin only (both naming conventions)
    match /auditLogs/{logId} {
      allow read, write: if isSuperAdmin();
    }
    
    match /audit-logs/{logId} {
      allow read, write: if isSuperAdmin();
    }
    
    // Settings collection - super admin only
    match /settings/{settingId} {
      allow read, write: if isSuperAdmin();
    }
    
    // Performance collection - super admin only
    match /performance/{perfId} {
      allow read, write: if isSuperAdmin();
    }
    
    // Security logs collection - super admin only
    match /securityLogs/{logId} {
      allow read, write: if isSuperAdmin();
    }
    
    // Health collection for health checks
    match /health/{healthId} {
      allow read, write: if isAdmin();
    }
    
    // Active sessions collection - for session tracking
    match /active-sessions/{sessionId} {
      allow read, write: if isSuperAdmin(); // Only super admins can manage sessions
      allow create: if isAuthenticated(); // Users can create their own sessions
      allow read, update: if isOwner(resource.data.userId); // Users can read/update their own sessions
    }
    
    // Activities collection - for activity tracking
    match /activities/{activityId} {
      allow read, write: if isAdmin();
      allow read, write: if isSuperAdmin();
      allow create: if isAuthenticated(); // Users can create activities
      allow read: if isOwner(resource.data.userId); // Users can read their own activities
    }
    
    // Documents collection - for document management
    match /documents/{documentId} {
      allow read, write: if isOwner(resource.data.userId);
      allow read, write: if isAdmin();
      allow create: if isAuthenticated(); // Users can create documents
    }
    
    // Allow all authenticated users to read most collections for dashboard functionality
    match /{collection}/{document} {
      allow read: if isAuthenticated() && 
        collection in ['users', 'applications', 'placements', 'programs', 'notifications', 
                      'stipendReports', 'issueReports', 'activities', 'documents', 'attendance', 
                      'leaveRequests', 'learnerProfiles'];
      allow read: if isSuperAdmin(); // Super admin can read any collection
      allow write: if isAdmin();
      allow write: if isSuperAdmin(); // Super admin can write to any collection
    }
    
    // Development rule - more permissive for testing (remove in production)
    match /{document=**} {
      allow read, write: if isAuthenticated() && 
        request.auth.token.email in ['developer@ispaan.com', 'sifiso@thegaselagroup.co.za', 'skitzoc9@gmail.com'];
    }
  }
}
